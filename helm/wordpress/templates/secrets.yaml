{{/*
Only create secrets if no external secret is specified in values
This allows users to bring their own pre-created secrets if desired
*/}}
{{- if not .Values.existingSecret }}

{{/*
Password Persistence Logic:
1. Check if a secret with our name already exists in the cluster
2. If it exists, extract and reuse the existing passwords
3. If not, generate new random passwords
This prevents password regeneration on helm upgrades
*/}}
{{- $secretName := printf "%s-secrets" (include "wordpress.fullname" .) }}
{{- $existingSecret := lookup "v1" "Secret" .Values.namespace $secretName }}

{{/*
Initialize variables to store existing passwords (empty by default)
These will be populated if we find an existing secret
*/}}
{{- $existingWordpressPassword := "" }}
{{- $existingMysqlPassword := "" }}
{{- $existingMysqlRootPassword := "" }}

{{/*
If we found an existing secret, extract the passwords from it
The passwords are base64 encoded in the secret, so we decode them
*/}}
{{- if $existingSecret }}
{{- $existingWordpressPassword = index $existingSecret.data "wordpress-password" | b64dec }}
{{- $existingMysqlPassword = index $existingSecret.data "mysql-password" | b64dec }}
{{- $existingMysqlRootPassword = index $existingSecret.data "mysql-root-password" | b64dec }}
{{- end }}

{{/*
Password Resolution Priority (left to right):
1. Explicit password from values.yaml (highest priority)
2. Existing password from current secret (if upgrading)
3. Generate new random 16-character password (fallback for new installs)
*/}}
{{- $wordpressPassword := .Values.wordpress.password | default $existingWordpressPassword | default (randAlphaNum 16) }}
{{- $mysqlPassword := .Values.mysql.password | default $existingMysqlPassword | default (randAlphaNum 16) }}
{{- $mysqlRootPassword := .Values.mysql.rootPassword | default $existingMysqlRootPassword | default (randAlphaNum 16) }}
{{/*
Create the Kubernetes Secret with our resolved passwords
All passwords are base64 encoded as required by Kubernetes secrets
*/}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "wordpress.fullname" . }}-secrets
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "wordpress.labels" . | nindent 4 }}
type: Opaque
data:
  # WordPress admin user password
  wordpress-password: {{ $wordpressPassword | b64enc | quote }}
  # MySQL root user password (for administrative tasks)
  mysql-root-password: {{ $mysqlRootPassword | b64enc | quote }}
  # MySQL wordpress user password (used by WordPress to connect to database)
  mysql-password: {{ $mysqlPassword | b64enc | quote }}
{{- end }}